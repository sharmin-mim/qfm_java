******************************************************************************

                            VERSION INFORMATION


******************************************************************************
version 2.0.* --------> Non-threaded version 
	No Thread
	I will write this part later
******************************************************************************

					version 2.1.* --------> Threaded version


******************************************************************************
version 2.1.0
	Commit ID: 026ec42 
	Commit: 026ec42e246925655eb6b42eab7a5753b93bc311
	Commit message: multithreading is done in SQP(), temp file is created in reroot() instead of reroot.txt file
	Changes: SQP()-> one thread is used
	Total maximum number of running thread: 2 (including main)
version 2.1.1
	Commit ID: 37185e3
	Commit: 37185e37ceb37b7b9cc27674544da5e1f9447bfa
	commit message: null value problem is solved
	Changes: SQP()-> one thread is used
	Total maximum number of running thread: 2 (including main)
version 2.1.2
	Commit ID: c365411 
	Commit: c36541159a1f6931e41e6cd853617fe7d9ba66dd
	Commit message: Version 2.1.2 -> Taxa: sat, vat, def, val added, GainList(Taxa, val).
									 MFM:no randomization, one thread for partA. 
									 SQP: one thread for S1.
	Changes: Routine/SQP()-> one thread is used
			 Routine/MFM_algo() -> one thread is used in partA gain calculation. Randomization part is deleted.
			 Taxa -> sat, vat, def, val variable are added
			 GainList -> all variable are deleted except taxa and val(val means maxGain)
	Total maximum number of running thread: 4 (including main)
version 2.1.3
	Commit ID: c24e698 
	Commit: c24e698e0e66569b017e52cca8e8b5a1ae914627   
	Commit message: Version 2.1.3 -> Taxa: partitionIndex adeded, Fm_algo: max Taxa is calculated using three method
	Changes: Routine/SQP()-> threading part is commented out for. Later I will change it with appropriate threading condition
			 Routine/MFM_algo() ->//I have tried Three ways for finding taxa which has maximum gain
				//1. If we keep all taxa in a treeset in descending order on the basis of val, sat and partitionIndex,
				// then first element will be taxa of maximum gain. But its not memory efficient
				//2. Finding max taxa for partA and partB separately, then compare them. 
				//3. Using iteration , then comparing one by one
				// Three approaches gives almost same running time. Method-2 better in terms of space.
				// That's why I m keeping it
				
			 Taxa -> partitionIndex variable are added
			 GainList -> all variable are deleted except taxa and val(val means maxGain)
	Total maximum number of running thread: 2 (including main) for now. But I will change it in next version/commit.

Future Step: Deffered variable will be deleted. merge function will be updated.
version 2.1.4
	Commit ID: b1e2e21  
	Commit: b1e2e21f4d56f9d7c908038ba9c066cf51d67cf0
	Commit message: Version 2.1.4 -> Taxa and SVD_log: defered variable is deleted
	Changes: Routine/SQP()-> threading part is commented out for. Later I will change it with appropriate threading condition
			 Routine/mCalculateScore is changed because deffered va is deleted in Taxa and Gainlist class.
			 Since partition_score = satified_quartet - violated_quartet, we dont need to calculate number of defered quartet.
				
			 Taxa -> defered variable is deleted
			 SVD_log -> defered variable is deleted
	Total maximum number of running thread: 2 (including main) for now. But I will change it in next version/commit.
Future Step:  merge function will be updated. Threading condition needs to change. will make mCalculateScore() efficient. 
version 2.1.4
	Commit ID: b1e2e21  
	Commit: b1e2e21f4d56f9d7c908038ba9c066cf51d67cf0
	Commit message: Version 2.1.4 -> Taxa and SVD_log: defered variable is deleted
	Changes: Routine/SQP()-> threading part is commented out for. Later I will change it with appropriate threading condition
			 Routine/mCalculateScore is changed because deffered va is deleted in Taxa and Gainlist class.
			 Since partition_score = satified_quartet - violated_quartet, we dont need to calculate number of defered quartet.
				
			 Taxa -> defered variable is deleted
			 SVD_log -> defered variable is deleted
	Total maximum number of running thread: 2 (including main) for now. But I will change it in next version/commit.
Future Step:  merge function will be updated. Threading condition needs to change. will make mCalculateScore() efficient. 
version 2.1.5
	Date: Sep 5, 2020
	Commit ID: 46b5941 
	Commit: 46b5941c9434dada35aa120457ff9ffee068c679
	Commit message: Version 2.1.5 -> Taxa: relaventQuartetList, Quartet: fillUpRelaventQuartetOfCorrespondingTaxa
	Changes: Routine/SQP()-> threading part is commented out for. Later I will change it with appropriate threading condition
			 Routine/Fm_algo : relaventQuartetList is used instead of rQuartetList	
			 Taxa -> relaventQuartetList is added
			 Quartet -> fillUpRelaventQuartetOfCorrespondingTaxa is added
	Total maximum number of running thread: 2 (including main) for now. But I will change it in next version/commit.
Future Step:  merge function will be updated. Threading condition needs to change. will make mCalculateScore()more efficient.
version 2.1.6 
	Date: Sep 6, 2020
	Running Time: 75 to 85 seconds for taxa = 500 and quartet = 250000 
	Commit ID: 53480e5 
	Commit: 53480e5478a9cffd2c178c84bb50df07f162b7cc
	Commit message: Version 2.1.6 -> Taxa: svdTableMap, mCalculateScore, svScore, sumOfSatOfSVDmap and sumOfVatOfSVDmap is added
	Changes: Routine/SQP()-> threading part is commented out for. Later I will change it with appropriate threading condition
		 Routine/Fm_algo : taxa.mCalculateScore is used instead of Routines.mCalculateScore	
			 Taxa -> HashMap<Integer, SVD_Log> svdTableMap instead of HashSet<SVD_Log> svdTable
				 sumOfSatOfSVDmap and sumOfVatOfSVDmap variable is added.
				 mCalculateScore(LinkedHashSet<Quartet> quartetList, int prevS, int prevV, int prevScore) is added
				 mCalculateScore(int prevS, int prevV, int prevScore) is added
				 svScore(Quartet q, char qStat ) is added
			 Quartet -> fillUpRelaventQuartetOfCorrespondingTaxa is modified for adding quartetID instead of quartet.
	
	Total maximum number of running thread: 2 (including main) for now. But I will change it in next version/commit.
Future Step:  merge function will be updated. Threading condition needs to change. will make FM_algo() more efficient.
version 2.1.7 
	Date: Sep 6, 2020
	Running Time: 65 to 70 seconds for taxa = 500 and quartet = 250000 
	Commit ID: c755a2b
	Commit: c755a2b0d1d009cbea466de2545c777dbbba7995
	Commit message: Version 2.1.7 -> QuartetMap is used in every section. Taxa-> initialRelaventQuartetID is added
	Changes: Routine/SQP()-> threading part is commented out for. Later I will change it with appropriate threading condition
		 Routine -> LinkedHashMap<Integer, Quartet> quartetMap is used in every section instead of LinkedHashSet<Quartet> quartetList
		 Routine/readQuartet : quartetMap is used instead of quartetList
		 Routine/Fm_algo : fillUpinitialRelaventQuartetID is calculated before loopAgain Loop 	
		 Taxa -> HashMap<Integer, SVD_Log> svdTableMap instead of HashSet<SVD_Log> svdTable
			 initialRelaventQuartetID list is added.
			 mCalculateScore(LinkedHashSet<Quartet> quartetList, int prevS, int prevV, int prevScore) is modified to 
						mCalculateScore(LinkedHashMap<Integer, Quartet> quartetMap, int prevS, int prevV, int prevScore)
		 Quartet -> fillUpRelaventQuartetOfCorrespondingTaxa is renamed to fillUpRelaventQuartetIDOfCorrespondingMovedTaxa
				    
	
	Total maximum number of running thread: 2 (including main) for now. But I will change it in next version/commit.
	Fulfilled Goal: Now FM_algo is more efficient than ever.
Future Step:  merge function will be updated. Threading condition needs to change. readQuartet() function should be modified.

version 2.1.8 (Final Non threaded Version)
	Date: Sep 7, 2020
	Running Time: 13 to 15 seconds for taxa = 500 and quartet = 250000 
	Commit ID: d08dc0c
	Commit: d08dc0c22b8b6326c84e14b15f8cf56ab2b63c14
	Commit message: Version 2.1.8 -> Quartet -> mCheckQuartet, merge -> jar, FM_algo -> no thread, sqp -> no thread
	Changes: Routine/SQP()-> threading part is commented out for. Later I will change it with appropriate threading condition
				merging method is changed.
		 Routine/mergeUsingJAR() and Routine/rerootTreeUsingJARAndProcessing() is added.
		 Routine/rerootTreeUsingJARAndProcessing(): rerooting is done using a jar file of phylonet package
		 Routine -> LinkedHashMap<Integer, Quartet> quartetMap is used in every section instead of LinkedHashSet<Quartet> quartetList
		 Routine/readQuartet : quartetList and qr arrayList is cleared as soon as they are not needed.
				       code for adding final bracket and semicolon and code for Replacing o with zero is commented out
				       because it is not needed while using JAR for rerooting
		 Routine/Fm_algo : PartA gain calculation was under a thread. This part is commented out. No thread is used here
		 SVD_log -> quertetID is used instead of quartet
		 Taxa ->  mCalculateScore is changed because of SVD_log definition
		 Quartet -> mCheckQuartet(): check status	
	
	Total maximum number of running thread: no thread for now. But I will change it in next version/commit.
	Fulfilled Goal: Now FM_algo is more efficient than ever without any thread
Future Step: Threading condition needs to change. 

version 2.1.9 (Final Threaded Version)
	Date: Sep 7, 2020
	Running Time: 13 to 15 seconds for taxa = 500 and quartet = 250000 
	Commit ID: d2bf661
	Commit: d2bf6618c4b13acedd6e7fa9d443987e6a99c043
	Commit message: Version 2.1.9 -> (Threaded version) FM_algo -> one thread, sqp -> one thread
	Changes: Routine/SQP()-> In First divide step, a thread will be created
		 Routine/Fm_algo : PartA gain calculation is done using a thread.
	Total maximum number of running thread: At a peak time there will be maximum 4 running thread
	
Future Step: Threading condition needs to change. 

version 2.1.10 (Final Threaded Version)
	Date: Sep 14, 2020
	Commit ID: e088c08
	Commit: e088c086d29c33d8de4019c58ac281a83d8d44e6
	Commit message: Version 2.1.10 -> (Threaded version) readQuartetSQP -> quartetMap, readQuartetNewick
	Changes: Routine/readQuartet() -> HashMap quartetMap is used instead of HashSet qartetList
		 Routine/readQuartetNewickIfWeightIsFrequency() is added 
		 Quartet -> quartetID variable is deleted.
			    fillUpSVDtableWithRelaventQuartetID() is added.
			    fillUpInitialRelaventQuartetID() is deleted
		 Taxa -> initialRelaventQuartetID list is deleted. in commented section there is a method named mCalculateScore3()
		 SVD_Log -> quartetID is deleted
	Total maximum number of running thread: At a peak time there will be maximum 4 running thread
	
Future Step: Threading condition needs to change. 
version 2.1.11 (Final Version (non-threaded))
	Date: Sep 14, 2020
	Commit ID: 27b0136
	Commit: 27b0136a5eb04586932f528656c937887eb51882
	Commit message: Version 2.1.11 -> (Non-threaded version) no thread is used. All implementations are same as previous one
	Changes: Only Threads are eliminated
	
	
Future Step: Threading condition needs to change. 
Future Step: Threading condition needs to change. 
version 2.1.12 (Final Version (non-threaded))
	Date: Oct 10, 2020
	Commit ID: 
	Commit: 
	Commit message: Version 2.1.12 -> space complexiety better than previous one
	Changes: Lots of changes
	
	
Future Step: Threading condition needs to change. 

version 2.1.13 (Threaded version)
	Date: Nov 22, 2020
	Commit ID: 9dae40f
	Commit: 9dae40f89526c011e4103d51aa89322708942cfc
	Commit message: Version 2.1.13 -> FM() is optimized. parallelStream is used in diff parts
	Changes: qfm_ad.Routines.MFM_algo(LinkedHashSet<Taxa>, LinkedHashSet<Taxa>, LinkedHashMap<Integer, Quartet>): parallel stream is used
		 qfm_ad.Routines.iCalculateScore(LinkedHashMap<Integer, Quartet>): parallel stream is used
		 qfm_ad.Routines.countSatisfiedQuartets(LinkedHashMap<Integer, Quartet>): parallel stream is used
		 qfm_ad.Routines.FM(LinkedHashSet<Taxa>, LinkedHashMap<Integer, Quartet>): optimized
	
	
Future Step: Threading condition needs to change.