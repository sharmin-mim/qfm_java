******************************************************************************

                            VERSION INFORMATION


******************************************************************************
version 2.0.* --------> Non-threaded version 
	No Thread
	I will write this part later
******************************************************************************

					version 2.1.* --------> Threaded version


******************************************************************************
version 2.1.0
	Commit ID: 026ec42 
	Commit: 026ec42e246925655eb6b42eab7a5753b93bc311
	Commit message: multithreading is done in SQP(), temp file is created in reroot() instead of reroot.txt file
	Changes: SQP()-> one thread is used
	Total maximum number of running thread: 2 (including main)
version 2.1.1
	Commit ID: 37185e3
	Commit: 37185e37ceb37b7b9cc27674544da5e1f9447bfa
	commit message: null value problem is solved
	Changes: SQP()-> one thread is used
	Total maximum number of running thread: 2 (including main)
version 2.1.2
	Commit ID: c365411 
	Commit: c36541159a1f6931e41e6cd853617fe7d9ba66dd
	Commit message: Version 2.1.2 -> Taxa: sat, vat, def, val added, GainList(Taxa, val).
									 MFM:no randomization, one thread for partA. 
									 SQP: one thread for S1.
	Changes: Routine/SQP()-> one thread is used
			 Routine/MFM_algo() -> one thread is used in partA gain calculation. Randomization part is deleted.
			 Taxa -> sat, vat, def, val variable are added
			 GainList -> all variable are deleted except taxa and val(val means maxGain)
	Total maximum number of running thread: 4 (including main)
version 2.1.3
	Commit ID: c24e698 
	Commit: c24e698e0e66569b017e52cca8e8b5a1ae914627   
	Commit message: Version 2.1.3 -> Taxa: partitionIndex adeded, Fm_algo: max Taxa is calculated using three method
	Changes: Routine/SQP()-> threading part is commented out for. Later I will change it with appropriate threading condition
			 Routine/MFM_algo() ->//I have tried Three ways for finding taxa which has maximum gain
				//1. If we keep all taxa in a treeset in descending order on the basis of val, sat and partitionIndex,
				// then first element will be taxa of maximum gain. But its not memory efficient
				//2. Finding max taxa for partA and partB separately, then compare them. 
				//3. Using iteration , then comparing one by one
				// Three approaches gives almost same running time. Method-2 better in terms of space.
				// That's why I m keeping it
				
			 Taxa -> partitionIndex variable are added
			 GainList -> all variable are deleted except taxa and val(val means maxGain)
	Total maximum number of running thread: 2 (including main) for now. But I will change it in next version/commit.

Future Step: Deffered variable will be deleted. merge function will be updated.
version 2.1.4
	Commit ID: b1e2e21  
	Commit: b1e2e21f4d56f9d7c908038ba9c066cf51d67cf0
	Commit message: Version 2.1.4 -> Taxa and SVD_log: defered variable is deleted
	Changes: Routine/SQP()-> threading part is commented out for. Later I will change it with appropriate threading condition
			 Routine/mCalculateScore is changed because deffered va is deleted in Taxa and Gainlist class.
			 Since partition_score = satified_quartet - violated_quartet, we dont need to calculate number of defered quartet.
				
			 Taxa -> defered variable is deleted
			 SVD_log -> defered variable is deleted
	Total maximum number of running thread: 2 (including main) for now. But I will change it in next version/commit.
Future Step:  merge function will be updated. Threading condition needs to change. will make mCalculateScore() efficient. 
version 2.1.4
	Commit ID: b1e2e21  
	Commit: b1e2e21f4d56f9d7c908038ba9c066cf51d67cf0
	Commit message: Version 2.1.4 -> Taxa and SVD_log: defered variable is deleted
	Changes: Routine/SQP()-> threading part is commented out for. Later I will change it with appropriate threading condition
			 Routine/mCalculateScore is changed because deffered va is deleted in Taxa and Gainlist class.
			 Since partition_score = satified_quartet - violated_quartet, we dont need to calculate number of defered quartet.
				
			 Taxa -> defered variable is deleted
			 SVD_log -> defered variable is deleted
	Total maximum number of running thread: 2 (including main) for now. But I will change it in next version/commit.
Future Step:  merge function will be updated. Threading condition needs to change. will make mCalculateScore() efficient. 
version 2.1.5
	Date: Sep 5, 2020
	Commit ID: 46b5941 
	Commit: 46b5941c9434dada35aa120457ff9ffee068c679
	Commit message: Version 2.1.5 -> Taxa: relaventQuartetList, Quartet: fillUpRelaventQuartetOfCorrespondingTaxa
	Changes: Routine/SQP()-> threading part is commented out for. Later I will change it with appropriate threading condition
			 Routine/Fm_algo : relaventQuartetList is used instead of rQuartetList	
			 Taxa -> relaventQuartetList is added
			 Quartet -> fillUpRelaventQuartetOfCorrespondingTaxa is added
	Total maximum number of running thread: 2 (including main) for now. But I will change it in next version/commit.
Future Step:  merge function will be updated. Threading condition needs to change. will make mCalculateScore()more efficient.
version 2.1.6 
	Date: Sep 6, 2020
	Running Time: 75 to 85 seconds for taxa = 500 and quartet = 250000 
	Commit ID: 53480e5 
	Commit: 53480e5478a9cffd2c178c84bb50df07f162b7cc
	Commit message: Version 2.1.6 -> Taxa: svdTableMap, mCalculateScore, svScore, sumOfSatOfSVDmap and sumOfVatOfSVDmap is added
	Changes: Routine/SQP()-> threading part is commented out for. Later I will change it with appropriate threading condition
			 Routine/Fm_algo : taxa.mCalculateScore is used instead of Routines.mCalculateScore	
			 Taxa -> HashMap<Integer, SVD_Log> svdTableMap instead of HashSet<SVD_Log> svdTable
				 sumOfSatOfSVDmap and sumOfVatOfSVDmap variable is added.
				 mCalculateScore(LinkedHashSet<Quartet> quartetList, int prevS, int prevV, int prevScore) is added
				 mCalculateScore(int prevS, int prevV, int prevScore) is added
				 svScore(Quartet q, char qStat ) is added
			 Quartet -> fillUpRelaventQuartetOfCorrespondingTaxa is modified for adding quartetID instead of quartet.
	
	Total maximum number of running thread: 2 (including main) for now. But I will change it in next version/commit.
Future Step:  merge function will be updated. Threading condition needs to change. will make FM_algo() more efficient.